{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi there!","text":"<p>I'm a Chief Architect at Red Hat working in the Asia Pacific CTO Office.</p> <p>My background is as an applied researcher who stumbled into the world of software  via MATLAB and Fortran. I have a masochistic streak which draws me to problems where business/mission complexity requires innovative solutions. If those solutions have an element of supporting good governance even better!</p> <p>Today I'm refining my mission at Red Hat. Interesting things I've been working on so far include:</p> <ul> <li>GPUaaS infrastructures with partners</li> <li>Digital Sovereignty including modern cloud infrastructure patterns</li> <li>Enabling AI stacks in a variety of circumstances.</li> <li>Security and Compliance in the complexity of the environments above.</li> </ul> <p>If any of this sounds interesting please reach out via LinkedIn.</p>"},{"location":"#projects-im-actively-working-on","title":"Projects I'm actively working on","text":"<ul> <li>Validated patterns demos - demo scenarios for work running on openshift</li> <li>mdformat fronmatter - formatting utility</li> </ul>"},{"location":"awesome_stuff/","title":"Awesome stuff","text":""},{"location":"awesome_stuff/#about-this-page","title":"About this page","text":"<p>A small list of awesome things that I have found along my techy journey.</p>"},{"location":"awesome_stuff/#command-line-tools","title":"Command line tools","text":"<ul> <li>Brew - missing package manager for mac os</li> <li>Direnv - how could I live without after finding it, contextual credentials based on terminal directory</li> </ul>"},{"location":"awesome_stuff/#documentation-tools","title":"Documentation tools","text":"<ul> <li>Mkdocs - python based documentation generation</li> <li>Mkdocs Material - ever expanding theme</li> </ul>"},{"location":"awesome_stuff/#linting","title":"Linting","text":"<ul> <li><code>pre-commit</code></li> <li><code>mdformat</code></li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/10/27/hello-world/","title":"Hello world!","text":"<p>A simple test post as I am bringing this blog alive.</p> <p>Extra content that should not be seen on the head page.</p>"},{"location":"blog/2023/10/30/validated-patterns-for-demos/","title":"Validated patterns for demos","text":"<p>Upon joining Red Hat as a Chief Architect I've been lucky enough to find some time to deep-dive into our products and upstream. One of the fun challenges that I faced straight away is our demo OpenShift environments, for many reasons, are emphemeral.</p> <p>In ephemeral environments GitOps is essential to quickly get to a consistent environment. Enter validated patterns.</p> <p>At a high level validated patterns gitops based reference architectures for multiple OpenShift clusters running across multiple environments (both on prem and in the cloud).</p> <p>The core <code>multicloud-gitops</code> provides:</p> <ul> <li>Multicluster management using Red Hat Advanced Cluster Manager,</li> <li>A hub-and-spoke approach to secrets management with upstream Vault Project,</li> <li>A single point for managing both operators and argo applications,</li> <li>Hooks for the procedural steps you just can't get rid of (such as unsealing vault).</li> </ul> <p>The result from an operationl perspective once I have a cluster the only steps I care about are:</p> <ol> <li>Cloning a pattern repo - <code>git clone git@github.com/butler54/validated-patterns-demos</code>,</li> <li>Logging into the cluster - <code>oc login --token=sha256~*** --server=https://URL:PORT</code>,</li> <li>Setup required secrets using the secret-template, if required;</li> <li><code>./pattern.sh make install</code>.</li> </ol> Podman and bootstrapping on mac os <p>To run the bootstrap scripts validated patterns presumes that you are using <code>podman</code>. Using brew:</p> <pre><code>brew install podman\npodman machine init\npodman machine start\n</code></pre> <p>All I have to do is wait and the environment will roll itself out automatically. Using OpenShift GitOps (Argo CD) the deployment rollout can easily be monitored and triaged for errors.</p> <p>When developing my own pattern or your own the best way to start is to fork from the <code>multicloud-gitops</code> repository.</p> <p>The validated-patterns operator has a few nice features such as branch based deployments but the setup has two features that I found to be essential for demo / development environments</p> <ul> <li>Safe by default secrets loading;</li> <li>Environmental overrides.</li> </ul>"},{"location":"blog/2023/10/30/validated-patterns-for-demos/#safe-by-default-secrets-loading","title":"Safe by default secrets loading","text":"<p>While in production environments enterprises typically take great care with secrets, in early stage development it is not uncommon for developers to be manipulating secrets from their laptops. A nice feature of validated patterns sit that the secrets bootstrapping when calling <code>./pattern.sh make install</code> and <code>./pattern.sh make load-secrets</code> explicitly does not look in the cloned source repo.</p> <p>Instead it looks for files in a users home directory which is highly unlikely to be managed by git. The result is that the template helps decrease the risk of developers committing secrets - as there is no reason to have the secrets in the repository at any point in time.</p>"},{"location":"blog/2023/10/30/validated-patterns-for-demos/#environmental-overrides","title":"Environmental overrides","text":"<p>The <code>values.yaml</code> files provides the high level abstraction of what needs to be deployed onto a cluster. For example <code>values-hub.yaml</code> example below deploys ACM, OpenShift pipelines (Tekton) and a pipelines Helm chart that contains Tekton pipeline definitions.</p> <pre><code>clusterGroup:\n  name: hub\n  isHubCluster: true\n\n  namespaces:\n    - open-cluster-management\n    - vault\n    - golang-external-secrets\n    - devops\n  # Operator subscriptions\n  subscriptions:\n    acm:\n      name: advanced-cluster-management\n      namespace: open-cluster-management\n      channel: release-2.8\n\n    openshift-pipelines:\n      name: openshift-pipelines-operator-rh\n      namespace: openshift-operators\n  # OCP project\n  projects:\n    - hub\n    - devops\n\n  # defining the path to an argoCD application (e.g. helm / Kustomize)\n  applications:\n    acm:\n      name: acm\n      namespace: open-cluster-management\n      project: hub\n      path: common/acm\n      ignoreDifferences:\n        - group: internal.open-cluster-management.io\n          kind: ManagedClusterInfo\n          jsonPointers:\n            - /spec/loggingCA\n\n\n    pipelines:\n      name: pipelines\n      namespace: devops\n      project: devops\n      path: charts/all/pipelines\n      ignoreDifferences:\n        - kind: ServiceAccount\n          jsonPointers:\n            - /imagePullSecrets\n            - /secrets\n  sharedValueFiles:\n    - /overrides/values-{{ $.Values.global.clusterPlatform }}.yaml\n    - /overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.global.clusterVersion\n      }}.yaml\n</code></pre> <p>In the case of my pipelines it requests a <code>storageclass</code> by name in the pipelines Helm chart. <code>storageclasses</code> typically have different names across different cloud providers which means we need provider specific overrides. The validated patterns operator provides a framework where a combination of <code>clusterGroup</code>, cloud provider and OpenShift version. This gives you value files of the format:</p> <ul> <li><code>values-global.yaml</code> default applies everywhere,</li> <li><code>values-hub.yaml</code> hub for your 'hub' RHACM cluster,</li> <li><code>sharedValueFiles</code></li> </ul> <p><code>sharedValueFiles</code> is an list defined in <code>values-hub.yaml</code> where you can define an ordered list by which files are overload the other values files. Within this environment we can use contextual information about the cluster such as:</p> <ul> <li><code>clusterGroup</code> - a user provided label.</li> <li><code>clusterPlatform</code> e.g. AWS, Azure, IBMCloud</li> <li><code>clusterVersion</code> e.g. 4.13</li> </ul> <p>to pick up override files if the exist.</p> clusterGroup <p><code>clusterGroup</code> is a label used together with RHACM particularly for clusters beyond the first. Applying:</p> <p><code>oc label managedclusters.cluster.open-cluster-management.io/&lt;your-cluster&gt; clusterGroup=&lt;managed-cluster-group&gt;</code></p> <p>will result in the correct <code>clusterGroup</code> payload being applied ot a given cluster.</p> <p>In this case my <code>pipelines</code> Helm chart presumes that the storageclass is defined in <code>{{ .Values.cloudProvider.storageClass }}</code> so to setup for both IBM Cloud and AWS using the <code>sharedValuesFiles</code> defined in the example yaml file above I created two files to contain the overrides:</p> <p><code>overrides/values-AWS.yaml</code></p> <pre><code>cloudProvider:\n  storageClass: gp3-csi\n</code></pre> <p><code>overrides/values-IBMCloud.yaml</code></p> <pre><code>cloudProvider:\n  storageClass: ibmc-vpc-block-10iops-tier\n</code></pre> <p>These override any values in the Helm chart's default <code>Values.yaml</code> file.</p>"},{"location":"blog/2023/10/30/validated-patterns-for-demos/#wrap-up","title":"Wrap up","text":"<p>Validated patterns, together with Helm, Argo CD, and RHACM. Provides a powerful tool to achieve consistency across multiple clusters and clouds.</p> <p>This blog was written based on this version of my validated-demos repo.</p> <p>Thanks to @beekhof and @day0hero who spent a considerable amount of time teaching me (and others) about validated patterns.</p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/validated-patterns/","title":"validated-patterns","text":""},{"location":"blog/category/gitops/","title":"gitops","text":""},{"location":"blog/category/openshift/","title":"openshift","text":""},{"location":"blog/category/demos/","title":"demos","text":""},{"location":"blog/category/hello/","title":"Hello","text":""},{"location":"blog/category/world/","title":"World","text":""}]}